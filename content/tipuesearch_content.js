var tipuesearch = {"pages": [{'title': 'About', 'text': '網際內容管理 (Web-based Content Management) \n 利用瀏覽器作為前端, 並將數位內容有系統地送到雲端伺服器中進行管理與運用的架構即稱為網際內容管理. \n 從機械設計專業的角度看待網際內容管理. \n 機械設計工程師應該從 CAD 出發透過零組件系統建立, 模擬與控制, 並在流程中利用 CAE 進行設計功能確認後, 將所有持續改進的內容透過分散式版次與網際管理系統進行保存與數位資料再利用. \n 評分: \n 出席 10% \n 個人倉儲與網頁 30% \n 每週網際簡報與 Pdf 報告 60% (含 Youtube 操作影片) \n 電腦輔助設計室與協同設計室行事曆 \n 全頁檢視 \n', 'tags': '', 'url': 'About.html'}, {'title': '三道牆理論', 'text': 'KMOLab 所開設課程目的是將擋在機械工程師面前的三道牆, 直接利用課程講授的過程, 一一呈現, 讓大家有及時找出突破這三道障礙的機會, 不僅讓各自的潛能有所發揮, 同時也希望大家能更自在地面對未來的更多挑戰. 這三道牆分別是: \n 理論基礎障礙 實務練習障礙 確立目標障礙 \n 理論基礎障礙 \n 所謂的理論基礎障礙就是技職體系學生在高中階段經常疏忽的英文, 數學與邏輯思考與獲取學問的基本能力. 也就是英文聽說讀寫的基本能力, 數學基本能力與了解如何透過邏輯思考解題, 並且學習如何發問, 如何與人協同合作解決問題的能力. \n http://mde.tw/cad2020/content/W10-W14.html \n 實務練習障礙 \n 第二道牆則是實務練習障礙, 許多人不願意花時間在突破上述第一道障礙的原因, 通常是因為不知道學習這些相對抽象的知識有甚麼用處? 因此, 為了凸顯突破第一道牆的重要性, 就必須要透過實際的課程案例, 讓大家了解一旦能突破第一道牆的障礙後, 養成持續學習這些理論基礎內容之後, 就可以相對用比較有效率的方式解決各種問題. \n 但是這需要學習者付出時間與耐性, 當面對完全陌生議題時, 就必須檢討是否第一道牆仍然卡在自己與解決方案中間. 然後用心不斷思考, 探索與練習之後, 若還是無法解決問題. 就必須要先試著描述問題後再尋求他人的協助. \n 假如能有以上的正確學習態度, 就有機會在面對各種問題時, 持續突破前面的兩道牆, 然後看到自己所追求的第三道牆, 並且此後能夠竭盡全力, 翻閱第三道牆的障礙, 積極達成預定目標. \n http://mde.tw/cad2020/content/HW1.html \n http://mde.tw/cad2020/content/HW2.html \n http://mde.tw/cad2020/content/HW1_SW.html \n https://github.com/KmolYuan/Pyslvs-UI \n 確立目標障礙 \n 你的人生目標是甚麼? \n https://www.ptt.cc/bbs/Tech_Job/M.1588362728.A.14F.html', 'tags': '', 'url': '三道牆理論.html'}, {'title': 'Programming', 'text': '利用 MSYS2 與 Tiny C 編譯 ANSI C \n programming_in_c.pdf \n cprogramming_tutorial.pdf \n ctext.pdf \n c-primer.pdf \n c-refcard.pdf \n 應用練習: \n 編譯修改  https://fossil-scm.org  增加新功能, 或令其可以透過 Oauth2 登入. \n https://fossil-scm.org/home/doc/trunk/www/theory1.wiki \n About Fossil SCM: \n The underlying database is very simple: it is an unordered collection of "artifacts". An artifact is a list of bytes - a "file" in the usual manner of thinking. Many artifacts are simply the content of source files that have been checked into the Fossil repository. Call these "content artifacts". Other artifacts, known as "control artifacts", contain ASCII text in a particular format that defines relationships between other artifacts, such as which content artifacts that go together to form a particular version of the project. Each artifact is named by its SHA1 or SHA3-256 hash and is thus immutable. Artifacts can be added to the database but not removed (if we ignore the exceptional case of shunning.) Repositories synchronize by computing the union of their artifact sets. SQL and relation theory play no role in any of this.', 'tags': '', 'url': 'Programming.html'}, {'title': 'Heroku', 'text': '在 Heroku 部署 Python Flask 網際程式, 令其從  https://qry.nfu.edu.tw/ \xa0 取出所需資料. \n 範例: \n http://mde.tw/cp2020/content/亂數分組.html \n https://nfulist.herokuapp.com/?semester=1091&courseno=0776&column=True \n https://github.com/mdecourse/nfulist \n 練習: \n 如何從  https://qry.nfu.edu.tw/classroom.php  取出機械設計工程系各實驗室的使用時間表, 並利用  https://developers.google.com/calendar  將資料存入 mde.nfu.edu.tw G Suite 所屬的 Calendar 中? \n 該如何利用  https://developers.google.com/calendar  建立一個機械設計工程系各實驗室的網際借用管理系統? \n 有沒有機會在 Heroku 部署服務程式, 透過\xa0 https://pypi.org/project/pydiscourse/  從  https://forum.eng.nfu.edu.tw  中撈出所需的資料並轉存入 Blogger 或 Pelican blog 系統? \n 有沒有機會利用 基因演算法 建立一個網際排課系統? \n https://github.com/AkaZuko/timetable_scheduler \n https://github.com/edceliz/GeneticAlgorithmUniversityClassScheduler \n https://github.com/Baksonator/evolutionary-timetable-scheduling \n https://github.com/hayrapetyan-armine/Timetable \n', 'tags': '', 'url': 'Heroku.html'}, {'title': '分組專題', 'text': 'W3 自選組員 6 人一組 \n 自選與網際內容管理相關的題目完成: \n Reveal 期中報告 \n LaTeX PDF 期中報告 \n Reveal 期末報告 \n LaTeX PDF 期末報告 \n Reference: \n https://github.com/mdecourse/latex-on-ci-cd \n https://github.com/mdecourse/texpdf \n https://github.com/mdecourse/tex-pdf-pipeline \n https://github.com/mdecourse/travis-ci-latex-pdf \n https://www.vipinajayakumar.com/continuous-integration-of-latex-projects-with-gitlab-pages.html \n', 'tags': '', 'url': '分組專題.html'}, {'title': 'WSL', 'text': 'https://docs.microsoft.com/zh-tw/windows/wsl/ \n https://docs.microsoft.com/en-us/windows/wsl/ \n https://docs.microsoft.com/zh-tw/windows/wsl/compare-versions \n \n IPv6 \n https://github.com/microsoft/WSL/issues/4518  ', 'tags': '', 'url': 'WSL.html'}, {'title': 'Projects', 'text': '', 'tags': '', 'url': 'Projects.html'}, {'title': 'Delta Printer', 'text': '利用  Onshape  繪製所需零組件後, 轉入  CoppeliaSim  進行模擬與控制後, 利用網際環境展示虛擬列印流程. \n 可以將 Onshape 換為 Solidworks - 請討論有何差別? \n 可以將 CoppeliaSim 換為  Webots  - 請討論有何差別? \n https://robotbenchmark.net/ \n 可以將網際環境展示改為近端套件 GUI 展示 - 請討論有何差別? \n 3D Printer design and simulation \n https://github.com/mdecourse/virtualkossel \n http://mde.tw/virtualkossel/', 'tags': '', 'url': 'Delta Printer.html'}, {'title': 'CMSiMDE', 'text': '利用 Flask, flask_cors, lxml, bs4, markdown, reveal.js 與 Pelican 開發網際內容管理系統. \n 利用  CMSiMDE  基本架構, 寫一個 CMSi21:  https://github.com/mdecourse/cmsi21 \n 使用  Flask  網際框架編寫 \n https://flask.palletsprojects.com/en/1.1.x/blueprints/ \n https://flask.palletsprojects.com/en/1.1.x/tutorial/templates/ \n https://www.makotemplates.org/ \n 利用  Leo Editor  編寫 \n https://groups.google.com/g/leo-editor \n 利用 HTML 中的 H1, H2 與 H3 標題進行分頁 \n https://www.cmsimple.org \n 可以將動態系統頁面轉為靜態頁面 \n 設法置入機械設計與精密機械領域有關的網際協同功能', 'tags': '', 'url': 'CMSiMDE.html'}, {'title': 'Fossil scm', 'text': '熟悉 Fossil SCM 的安裝配置與管理 \n https://fossil-scm.org \n', 'tags': '', 'url': 'Fossil scm.html'}, {'title': 'CDiMDE', 'text': '延伸 cdproject1 功能, 設法與 Discourse 整合, 應用於機械設計教學與研究. \n 整合 CDiMDE 與 Discourse \n https://meta.discourse.org/t/login-flow-flask-discourse-flask-with-oauth/162153 \n Flask and ember.js: \n https://flask.palletsprojects.com \n https://emberjs.com/ \n https://github.com/gaganpreet/todo-flask-ember \n Discourse: \n https://github.com/samamorgan/discourse \n PostgreSQL: \n https://www.postgresql.org/ \n Beginning Databases with PostgreSQL: \n https://link.springer.com/book/10.1007/978-1-4302-0018-5 \n PostgreSQL configuration: \n https://link.springer.com/book/10.1007/978-1-4842-5663-3', 'tags': '', 'url': 'CDiMDE.html'}, {'title': 'Discourse', 'text': '研究如何安裝配置 Discourse, 並設法透過 API 延伸其應用. \n https://github.com/discourse/discourse \n https://blog.codinghorror.com/ \n Forum for Discourse: \n https://meta.discourse.org/ \n Demo of Discourse: \n https://try.discourse.org/ \n MDE Discourse: \n https://forum.eng.nfu.edu.tw \n https://jpme.eng.nfu.edu.tw \n Beginning Ruby 3: \n https://link.springer.com/book/10.1007/978-1-4842-6324-2 \n Learn Rails 6: \n https://link.springer.com/book/10.1007/978-1-4842-6026-5 \n Clean Ruby: \n https://link.springer.com/book/10.1007/978-1-4842-5546-9 \n Ember.js: \n https://emberjs.com/ \n PostgreSQL: \n https://www.postgresql.org/', 'tags': '', 'url': 'Discourse.html'}]};